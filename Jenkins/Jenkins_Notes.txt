-----------------------------------------------------------------------------------------------------------------------
Jenkins
-----------------------------------------------------------------------------------------------------------------------
class 1 : 24-06-2023
-----------------------------------------------------------------------------------------------------------------------
Jenkins Installation:

URL - https://pkg.jenkins.io/debian-stable/

s1- curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
    /usr/share/keyrings/jenkins-keyring.asc > /dev/null
	
s2 - echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null

s3 - sudo apt-get update
	 sudo apt-get install fontconfig openjdk-11-jre -y 
     sudo apt-get install jenkins -y 

To change the Port number of Jenkins:
vi /etc/default/jenkins
vi /etc/systemd/system/multi-user.target.wants/jenkins.service

-----------------------------------------------------------------------------------------------------------------------
Triggers:

1. Build Periodically 
2. POLL SCM
3. Github Webhook Trigger 

Github repo --> https://github.com/OpqTech/java-example.git
-----------------------------------------------------------------------------------------------------------------------
class 2 : 25-06-2023
-----------------------------------------------------------------------------------------------------------------------
Master-Slave:
-----------------------------------------------------------------------------------------------------------------------
class 3 : 26-06-2023
-----------------------------------------------------------------------------------------------------------------------
Plugins:

Monitoring - TO monitor Jenkins server and slaves 
Jfrog - To integrate Jfrog with jenkins 
Perodic Backup - To periodically take backup of jenkins server 
SonarQube Scanner - Code Quality
Docker - To integrate Docker with jenkins
Kuberntes - To integrate Kubernetes with jenkins
Terraform - To integrate Terraform with jenkins
git, AWS ECR, Metrics, Paramater, pipeline, multibranch, jira, Mailer, etc. 

Secure Jenkins:

1. Matrix based Security:
2. Project Based Matrix Authorization Strategy:
-----------------------------------------------------------------------------------------------------------------------
Assigment:
1. Setup Github Webhook
2. Setup Jenkins Master-Slave
3. Execute a job on slave machine by creating a new war file and deploy it in tomcat webapps folder 

-----------------------------------------------------------------------------------------------------------------------
class 4 : 27-06-2023
-----------------------------------------------------------------------------------------------------------------------
CICD - (Continuous Integration - Continuous Delivery/Deployment)

1. Git Checkout
2. Build Stage
3. Push Stage
4. Deploy Stage 

-----------------------------------------------------------------------------------------------------------------------
Pipeline:

In other words, a Jenkins Pipeline is a collection of jobs or events that brings the software 
from version control into the hands of the end users by using automation tools. 
It is used to incorporate continuous delivery in the software development workflow.

Pipeline contains a collection of states such as build, deploy, test and release. 
These jobs or events are interlinked with each other. Every state has its jobs, 
which work in a sequence called a continuous delivery pipeline.
-----------------------------------------------------------------------------------------------------------------------
Jenkins File:

Jenkins Pipeline can be defined by a text file called JenkinsFile. 
You can implement pipeline as code using JenkinsFile, and this can be defined by using a 
groovy DSL (Domain Specific Language). With the help of JenkinsFile, 
you can write the steps required for running a Jenkins Pipeline.

Name of file: Jenkinsfile
-----------------------------------------------------------------------------------------------------------------------
examples:

pipeline {
	agent 
	stages {
		stage ('Git Checkout') {
			steps {
				echo 'This is checkout stage'
			}
		}
		stage ('Build Stage') {
			steps {
				echo 'This is Build stage'
			}
		}		
		stage ('Push Stage') {
			steps {
				echo 'This is Push stage'
			}
		}
		stage ('Deploy Stage') {
			steps {
				echo 'This is Deploy stage'
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
pipeline {
	agent 
	stages {
		stage ('Git Checkout') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'github-creds', passwordVariable: 'password', usernameVariable: 'username')]) {
				checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/OpqTech/java-example.git']])
			}
		}
		stage ('Build Stage') {
			steps {
				echo 'This is Build stage'
			}
		}		
		stage ('Push Stage') {
			steps {
				echo 'This is Push stage'
			}
		}
		stage ('Deploy Stage') {
			steps {
				echo 'This is Deploy stage'
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
pipeline{
agent none
	stages {
		stage('GIT checckout') {
			agent {label 'slave1'}
			steps {
				echo 'This is Checkout stage'
			}
		}

		stage('Build') {
			agent {label 'slave1'}
			steps {
				echo 'This is Build stage'
			}
		}

		stage('Push') {
			agent {label 'slave2'}
			steps {
				echo 'This is push stage'
			}
		}

		stage('Deploy') {
			agent {label 'slave2'}
			steps {
				echo 'This is Deploy stage'
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
pipeline{
agent {label 'slave1'}
	stages {
		stage('GIT checckout') {
			steps {
				checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/OpqTech/java-example.git']])
			}
		}

		stage('Build') {
			steps {
				sh 'mvn clean install'
			}
		}

		stage('Push') {
			steps {
			echo 'This is push stage'
			}
		}

		stage('Deploy') {
			steps {
			sh 'sudo cp target/*.war /opt/tomcat/apache-tomcat-9.0.68/webapps'
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
parallel stages:

pipeline {
	agent 
	stages {
		stage ('Git Checkout') {
			steps {
				echo 'This is checkout stage'
			}
		}
		stage ('Build Stage') {
			steps {
				echo 'This is Build stage'
			}
		}		
		stage ('Push Stage') {
			steps {
				echo 'This is Push stage'
			}
		}
		stage ('Deploy Stage') {
			parallel (
				stage ('Deploy-1') {
					steps {
						echo 'This is Deploy-1 stage'
					}
				}
				stage ('Deploy-2') {
					steps {
						echo 'This is Deploy-2 stage'
					}
				}
				stage ('Deploy-3') {
					steps {
						echo 'This is Deploy-3 stage'
					}
				}				
			)
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
Parallel Steps:

pipeline {
	agent any
	stages {
		stage ('Git Checkout') {
			steps {
				echo 'This is checkout stage'
			}
		}
		stage ('Build Stage') {
			steps {
				echo 'This is Build stage'
			}
		}		
		stage ('Push Stage') {
			steps {
				echo 'This is Push stage'
			}
		}
		stage ('Deploy Stage') {
			steps{
				parallel (
					step1: {
						echo 'this  is step1'
					},
					step2: {
						echo 'this  is step2'
					},
					step3: {
						echo 'this  is step3'
					}
				)
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
class 5 : 29-06-2023
-----------------------------------------------------------------------------------------------------------------------
Multibranch Pipeline: 

Parameterized job: 

"$<param>"
"$env.<param>"
"$prams.<param>"

http://43.205.145.214:8080/env-vars.html/

-----------------------------------------------------------------------------------------------------------------------
Assignmnet:
1. Golobal variable
2. Environment Variable 

jfrog:

URL --> https://github.com/OpqTech/jfrog-installation.git 

username: admin
password: password 

Create a repository
-----------------------------------------------------------------------------------------------------------------------
SonarQube: 

URL --> 

username: admin
password: admin

Quality Gates and Quality Profiles 

-----------------------------------------------------------------------------------------------------------------------
